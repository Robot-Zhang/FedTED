clients_model:
  - name: twin_branch  # def name in utils.net
    num: 1   # number of models in this name, only works when heterogeneous is True
    args:   # args dict of model def
      feature_extractor:
        name: cnn
        args:
          in_dim: 28
          in_channels: 1
          out_dim: 256
          channels:  # if None, use 2-layer CNN same as FedAvg, else, use same as in FedMD
            - 256
            - 128
      classifier:
        name: mlp
        args:
          in_dim: 256
          out_dim: 10
          hidden_layers:
            - 512
  - name: twin_branch  # def name in utils.net
    num: 1   # number of models in this name, only works when heterogeneous is True
    args: # args dict of model def
      feature_extractor:
        name: cnn
        args:
          in_dim: 28
          in_channels: 1
          out_dim: 256
          channels: # if None, use 2-layer CNN same as FedAvg, else, use same as in FedMD
            - 100
            - 200
      classifier:
        name: mlp
        args:
          in_dim: 256
          out_dim: 10
          hidden_layers:
            - 512
  - name: twin_branch  # def name in utils.net
    num: 3   # number of models in this name, only works when heterogeneous is True
    args: # args dict of model def
      feature_extractor:
        name: cnn
        args:
          in_dim: 28
          in_channels: 1
          out_dim: 256
          channels: # if None, use 2-layer CNN same as FedAvg, else, use same as in FedMD
            - 64
            - 50
      classifier:
        name: mlp
        args:
          in_dim: 256
          out_dim: 10
          hidden_layers:
            - 512
  - name: twin_branch  # def name in utils.net
    num: 2   # number of models in this name, only works when heterogeneous is True
    args: # args dict of model def
      feature_extractor:
        name: cnn
        args:
          in_dim: 28
          in_channels: 1
          out_dim: 256
          channels: # if None, use 2-layer CNN same as FedAvg, else, use same as in FedMD
            - 64
            - 64
            - 64
      classifier:
        name: mlp
        args:
          in_dim: 256
          out_dim: 10
          hidden_layers:
            - 512
  - name: twin_branch  # def name in utils.net
    num: 2   # number of models in this name, only works when heterogeneous is True
    args: # args dict of model def
      feature_extractor:
        name: cnn
        args:
          in_dim: 28
          in_channels: 1
          out_dim: 256
          channels: # if None, use 2-layer CNN same as FedAvg, else, use same as in FedMD
            - 75
            - 95
            - 31
      classifier:
        name: mlp
        args:
          in_dim: 256
          out_dim: 10
          hidden_layers:
            - 512
  - name: twin_branch  # def name in utils.net
    num: 3   # number of models in this name, only works when heterogeneous is True
    args: # args dict of model def
      feature_extractor:
        name: cnn
        args:
          in_dim: 28
          in_channels: 1
          out_dim: 256
          channels: # if None, use 2-layer CNN same as FedAvg, else, use same as in FedMD
            - 64
            - 32
      classifier:
        name: mlp
        args:
          in_dim: 256
          out_dim: 10
          hidden_layers:
            - 512
  - name: twin_branch  # def name in utils.net
    num: 3   # number of models in this name, only works when heterogeneous is True
    args: # args dict of model def
      feature_extractor:
        name: cnn
        args:
          in_dim: 28
          in_channels: 1
          out_dim: 256
          channels: # if None, use 2-layer CNN same as FedAvg, else, use same as in FedMD
            - 512
            - 256
      classifier:
        name: mlp
        args:
          in_dim: 256
          out_dim: 10
          hidden_layers:
            - 512
  - name: twin_branch  # def name in utils.net
    num: 5   # number of models in this name, only works when heterogeneous is True
    args: # args dict of model def
      feature_extractor:
        name: cnn
        args:
          in_dim: 28
          in_channels: 1
          out_dim: 256
          channels: # if None, use 2-layer CNN same as FedAvg, else, use same as in FedMD
            - 128
            - 64
            - 32
      classifier:
        name: mlp
        args:
          in_dim: 256
          out_dim: 10
          hidden_layers:
            - 512
server_model:
other_model:
  generator: # generator for FedGen
    name: generator
    args:
      noise_dim: 20
      hidden_dim: 128
      latent_dim: 256
      embedding: False
